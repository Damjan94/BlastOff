[gd_scene load_steps=4 format=3 uid="uid://c1tug87fw4xs"]

[ext_resource type="Texture2D" uid="uid://cdelynp7nbp4" path="res://rocket.png" id="1_m874q"]

[sub_resource type="GDScript" id="GDScript_lpiqs"]
script/source = "extends Area2D

const max_speed: float = 100
const acceleration: float = 70
const friction = 90

signal player_hurt

var is_game_running: bool = false

var move_vec: Vector2

func _ready() -> void:
    GameManager.game_started.connect(_on_game_start)
    GameManager.game_over.connect(_on_game_over)
    self.connect(\"player_hurt\", _on_hurt)

func apply_friction(velocity: float, delta: float) -> float:
    var magniitude_of_vec = abs(velocity)
    var direction_of_vec = (velocity / magniitude_of_vec) # Gives either 1 or -1 (left or right)
    magniitude_of_vec -= friction * delta # Reduces the velocity
    return (direction_of_vec * magniitude_of_vec)

func move(delta: float):
    # Increment velocity with acceleration if given the input
    if GameManager.is_left_button_pressed or GameManager.is_right_button_pressed: # Checking whether either button is pressed
        if (GameManager.is_left_button_pressed and GameManager.is_right_button_pressed): # If bothe
            move_vec.x = apply_friction(move_vec.x, delta)
        else:
            if GameManager.is_left_button_pressed: # If asked to move left, accelerate to max speed
                move_vec.x += -1 * (acceleration * delta) # Accelerate to -ve x
            elif GameManager.is_right_button_pressed:
                move_vec.x += (acceleration * delta)

    # Slowing down (gradually)
    elif move_vec.length() > (friction * delta):
        move_vec.x = apply_friction(move_vec.x, delta)
    else:
        move_vec = Vector2.ZERO # Stop the character

    move_vec = move_vec.limit_length(max_speed)
    self.position += move_vec

    var horizontal_screen_size = get_viewport_rect().size.x
    if (self.position.x >= horizontal_screen_size) or (self.position.x <= 0):
        self.position.x = clamp(self.position.x , 0, horizontal_screen_size) # Prevents the rocket from going off the screen
        move_vec = Vector2.ZERO # Resets the velocity to sudden stop

func _physics_process(delta: float) -> void:
    if is_game_running:
        move(delta)

func _on_hurt():
    GameManager.emit_signal(\"game_over\")
    print(\"PLACEHOLDER: Player got hurt\")

func _on_area_shape_entered(_area_rid: RID, area: Area2D, _area_shape_index: int, _local_shape_index: int) -> void:
    if area.is_in_group(\"obstacles\"):
        emit_signal(\"player_hurt\")

func _on_game_start() -> void:
    is_game_running = true

func _on_game_over() -> void:
    is_game_running = false
"

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_782wp"]
radius = 40.0
height = 177.0

[node name="Rocket" type="Area2D"]
collision_layer = 2
script = SubResource("GDScript_lpiqs")

[node name="Sprite2D" type="Sprite2D" parent="."]
scale = Vector2(0.2, 0.2)
texture = ExtResource("1_m874q")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(0, -0.5)
shape = SubResource("CapsuleShape2D_782wp")

[connection signal="area_shape_entered" from="." to="." method="_on_area_shape_entered"]
